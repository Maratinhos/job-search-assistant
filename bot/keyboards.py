from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from db.models import Vacancy
from typing import List

# --- Main Menu Keyboards ---
def main_menu_keyboard(
    vacancy_count: int,
    has_resume: bool,
    has_selected_vacancy: bool,
    show_survey_button: bool
) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    buttons = []

    if has_selected_vacancy:
        buttons.extend([
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ/–≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="analyze_match")],
            [InlineKeyboardButton("‚úâÔ∏è –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", callback_data="generate_letter")],
            [InlineKeyboardButton("üìû –ü–ª–∞–Ω —Å–æ–∑–≤–æ–Ω–∞ —Å HR", callback_data="generate_hr_plan")],
            [InlineKeyboardButton("üíª –ü–ª–∞–Ω —Ç–µ—Ö. —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è", callback_data="generate_tech_plan")],
        ])

    if show_survey_button:
        buttons.append([InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data="start_survey")])

    if vacancy_count > 0:
        buttons.append([InlineKeyboardButton(f"üìÇ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–∫–∞–Ω—Å–∏—é ({vacancy_count})", callback_data="select_vacancy")])

    buttons.append([InlineKeyboardButton("‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="upload_vacancy")])

    if has_resume:
        buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", callback_data="update_resume")])

    return InlineKeyboardMarkup(buttons)

# --- Vacancy Selection Keyboard ---
def vacancy_selection_keyboard(vacancies: List[Vacancy]) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    buttons = []
    for vacancy in vacancies:
        # callback_data will be like 'vacancy_select_123'
        buttons.append([InlineKeyboardButton(vacancy.title, callback_data=f"vacancy_select_{vacancy.id}")])

    buttons.append([InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="upload_vacancy")])
    buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_action")])
    return InlineKeyboardMarkup(buttons)

# --- Cancel Keyboard ---
def cancel_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞'."""
    buttons = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]]
    return InlineKeyboardMarkup(buttons)


def points_packages_keyboard(packages: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞–∫–µ—Ç–æ–≤ –±–∞–ª–ª–æ–≤."""
    buttons = []
    for key, package in packages.items():
        points = package["points"]
        price = package["price"]
        button = InlineKeyboardButton(
            text=f"{points} –±–∞–ª–ª–æ–≤ - {price} —Ä—É–±.",
            callback_data=f"buy_{key.split('_')[1]}"
        )
        buttons.append([button])
    buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_action")])
    return InlineKeyboardMarkup(buttons)
