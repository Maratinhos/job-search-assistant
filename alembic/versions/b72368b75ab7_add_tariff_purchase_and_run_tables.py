"""add tariff purchase and run tables

Revision ID: b72368b75ab7
Revises: 630785bf65fd
Create Date: 2025-09-06 20:30:45.951555

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b72368b75ab7'
down_revision: Union[str, Sequence[str], None] = '630785bf65fd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    tariffs_table = op.create_table('tariffs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('runs_count', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )

    op.bulk_insert(tariffs_table,
        [
            {'id': 1, 'name': 'Бесплатный', 'price': 0, 'runs_count': 1, 'is_active': True},
            {'id': 2, 'name': '49 руб', 'price': 49, 'runs_count': 1, 'is_active': True},
            {'id': 3, 'name': '399 руб', 'price': 399, 'runs_count': 10, 'is_active': True},
            {'id': 4, 'name': '999 руб', 'price': 999, 'runs_count': 35, 'is_active': True},
        ]
    )

    bind = op.get_bind()
    if bind.engine.name == 'postgresql':
        now_func = sa.text('now()')
    else:
        now_func = sa.text('CURRENT_TIMESTAMP')

    op.create_table('purchases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tariff_id', sa.Integer(), nullable=False),
    sa.Column('runs_total', sa.Integer(), nullable=False),
    sa.Column('runs_left', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=now_func, nullable=True),
    sa.ForeignKeyConstraint(['tariff_id'], ['tariffs.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_purchases_user_id'), 'purchases', ['user_id'], unique=False)

    op.create_table('runs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('purchase_id', sa.Integer(), nullable=False),
    sa.Column('resume_id', sa.Integer(), nullable=False),
    sa.Column('vacancy_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=now_func, nullable=True),
    sa.ForeignKeyConstraint(['purchase_id'], ['purchases.id'], ),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['vacancy_id'], ['vacancies.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('resume_id', 'vacancy_id', name='uq_run_resume_vacancy')
    )
    op.create_index(op.f('ix_runs_user_id'), 'runs', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_runs_user_id'), table_name='runs')
    op.drop_table('runs')
    op.drop_index(op.f('ix_purchases_user_id'), table_name='purchases')
    op.drop_table('purchases')
    op.drop_table('tariffs')
    # ### end Alembic commands ###
